

✅ Tech Round 1: Basic HTML, JavaScript, TypeScript, React

1. New feature introduced in HTML5
2. Flex vs Grid
3. What is hoisting in JavaScript? How does it work for var, let, and const?
4. Explain closure in JavaScript with an example.
5. What is the difference between == and ===?
6. length vs size in JavaScript?
7. What are arrow functions and how do they differ from regular functions?
8. What are Promises and how do they work?
9. What does async / await do under the hood?
10. What is the event loop? Explain how JavaScript handles async code.
11. What are the main data types in TypeScript?
12. What is type inference in TypeScript?
13. How do you create and use interfaces in TypeScript?
14. What is the difference between interface and type in TypeScript?
15. How can you define optional and readonly properties in interfaces?
16. Rotates an array to the right by n positions.
17. Functional vs class components
18. Explain useEffect with cleanup
19. useCallback vs useMemo

✅ Tech Round 2: 

1. Implement a debounce function in JavaScript.
2. Write a custom Promise.all() implementation.
3. What is the difference between microtasks and macrotasks?
4. What are generators and how are they different from async functions?
5. What is currying? Write a curried function.
6. How would you implement a retry mechanism for an API call?
7. What happens when you type a URL in the browser and press enter?
8. What is CI/CD? Explain your experience using it.
9. Explain CORS and how to resolve related issues.
10. How will you migrate Angular App to React App. What will be your approach?
11. You’re a team lead. A fresher on your team is underperforming, and the client escalates. How will you handle it?



Tech Stack: MERN Stack
Hey everyone! A follower with 4+ years of experience just shared their Deloitte interview questions to help others prepare with confidence.

Overall Process:
1. Technical Round 1
2. Technical Round 2
3. Managerial Round (scenario and situation related question)
4. HR Round – Salary, Location

Technical Round 1:

1. What’s the difference between let, const, and var in JavaScript?
2. Explain closures with a use case.
3. Write a function to flatten a nested array in JavaScript.
4. Reverse a string without using built-in methods.
5. What is event bubbling and how do you stop it?
6. Explain JavaScript promises and async/await.
7. Explain debouncing and throttling.
8. What is hoisting in JavaScript?
9. Explain prototypal inheritance in JavaScript.
10. Create a simple REST API with Express.js.
11. How does MongoDB store data?
12. Describe CORS and how to handle it in Node.js.
13. How does React’s Virtual DOM improve performance?
14. What is the use of useState and useEffect?

Scenario-Based Questions (Additions):
15. A user submits a form but the data isn't appearing in the database. Walk me through how you would debug this from the frontend to the backend.

16. You’re tasked with building a user registration page in React. How would you handle form validation, error handling, and data submission to a Node.js server?

 Technical Round 2:

1. Design a scalable blogging platform using MERN.
2. How do you handle authentication in a MERN app?
3. Explain the Redux data flow.
4. What are React Hooks? List custom hooks you’ve written.
5. How do you prevent unnecessary re-renders in React?
6. How would you implement role-based access control (RBAC)?
7. Design a real-time chat application.
8. How do you manage large form states in React?
9. How do you paginate large datasets in MongoDB?
10. What are indexes in MongoDB, and how do they affect performance?
11. Explain middleware in Express.js with examples.
12. Compare SQL vs NoSQL – pros/cons for large-scale apps.
13. What is load balancing, and how would you implement it?
14. How would you monitor and log your Node.js application in production?

Scenario-Based Questions
15. You’ve been asked to implement role-based access where Admin can edit/delete users, and normal users can only view. How would you secure this across both frontend and backend?

𝗥𝗲𝗮𝗰𝘁 𝗜𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀 𝗯𝘆 𝗟𝗲𝘃𝗲𝗹

🟢 𝗕𝗮𝘀𝗶𝗰:
 1. What is React and how does it work?
 2. Functional vs Class components
 3. Props vs State
 4. JSX and its purpose
 5. Virtual DOM
 6. Event handling
 7. Conditional rendering
 8. Key prop in lists

🟡 Intermediate:
 1. useState & useEffect
 2. Controlled vs Uncontrolled components
 3. React Router & client-side routing
 4. Context API vs Redux
 5. Prop drilling & solutions
 6. React.memo, useMemo, useCallback
 7. Higher-Order Components (HOCs)
 8. Forms & controlled inputs

🔴 Advanced:
 1. Re-renders & optimization
 2. Reconciliation & diffing algorithm
 3. Lazy loading with React.lazy & Suspense
 4. Error boundaries
 5. Auth & protected routes
 6. Render props vs HOCs
 7. SSR vs CSR
 8. React Fiber & Concurrent Mode
 9. Testing tools (Jest, RTL, etc.)

Master these concepts and you’re ready to ace any React interview.


25 JavaScript Concepts You Must Master before your next interview 👇


Difference between var, let, and const

Hoisting and Temporal Dead Zone

Scope and Lexical Environment

Closures

The this keyword

Prototype & Inheritance

Call, Apply, Bind

Event Loop & Microtask Queue

Execution Context

Higher-Order Functions & Callbacks

Promises & Async/Await

Event Delegation

Debouncing & Throttling

Deep vs Shallow Copy

Currying

Modules (ESM vs CommonJS)

Garbage Collection

Type Coercion

null, undefined, and NaN

Destructuring & Spread

Shadowing

Generators & Iterators

Symbols & WeakMaps

Event Propagation (Capture vs Bubble)

How new & instanceof really work



 Day 1

Difference between == and ===
Explain var, let, const and temporal dead zone
What is hoisting?
Explain closures with examples
What is the event loop? microtasks vs macrotasks
How does this binding work?
What are prototypes and prototypal inheritance?
What are higher-order functions?
Explain immutability and why it matters
What is debouncing vs throttling?
Difference between null and undefined
Explain call, bind, and apply
What are pure functions and side effects?
Explain shallow vs deep copy
What is type coercion in JS?
What are truthy and falsy values?
What is pass-by-value vs pass-by-reference?
What is IIFE and why is it used?
What are arrow functions and lexical this?
What is event bubbling and capturing?


Day 2

Explain Promise.all, Promise.any, and Promise.race.
What is async/await and how does it differ from promises?
What are generators and iterators?
How do modules (ESM vs CommonJS) differ?
Explain tree-shaking and dead code elimination.
What is a polyfill and when is it needed?
How does the event loop differ in Node vs Browser?
Explain Web Workers and Transferable Objects.
What is the Reflect API and why is it used?
What are Proxies and real-world use cases?
How does structured cloning differ from JSON cloning?
What are Tagged Template Literals?
What are WeakMaps and WeakSets used for?
Explain BigInt and its limitations.
What’s the difference between microtask queue and render queue?
How does requestIdleCallback differ from requestAnimationFrame?
What is a SharedArrayBuffer and where is it used?
How do dynamic imports (import()) work?
Explain how async generators differ from regular ones.
What are CSP nonces and how do they affect script loading?


Continuing my series on interview experiences, where I share the lessons, challenges, and takeaways from different stages of my journey.

📌 Process

👉 Recruiter reached out via Naukri
👉 4 Tech Rounds →
1️⃣ DSA (arrays, strings, complexity)
2️⃣ Core JavaScript Fundamentals
3️⃣ Web Fundamentals (browser + coding)
4️⃣ Managerial

🎯 Round 1 – DSA

👉 Classic problems on arrays & strings (reverse, duplicates, subarrays).
👉 Two-pointer problem under time pressure.
👉 Detailed time & space complexity discussion.

💡 Example (Two-pointer → Remove duplicates in sorted array):

function removeDuplicates(nums) {
 let i = 0;
 for (let j = 1; j < nums.length; j++) {
 if (nums[j] !== nums[i]) {
 i++;
 nums[i] = nums[j];
 }
 }
 return i + 1;
}
console.log(removeDuplicates([1,1,2,3,3,4])); // 4

🎯 Round 2 – Core JavaScript Fundamentals

👉 this keyword in different contexts.
👉 Call, Bind, Apply (and polyfills).
👉 Closures example:

function counter() {
 let count = 0;
 return () => ++count;
}
const c = counter();
console.log(c()); // 1
console.log(c()); // 2


👉 Event loop (microtasks vs macrotasks).
👉 Deep vs shallow copy.
👉 PubSub coding problem.

🎯 Round 3 – Web Fundamentals

👉 How browsers render pages (Critical Rendering Path).
👉 WebSockets vs HTTP.
👉 Machine coding → custom hook with timer.
👉 CSS positioning (absolute vs relative vs fixed vs sticky).
👉 Event delegation:

document.getElementById("list").addEventListener("click", e => {
 if(e.target.tagName === "LI") console.log("Clicked:", e.target.textContent);
});


👉 HTTP vs HTTPS (TLS basics).
👉 Browser storage: localStorage, sessionStorage, cookies.
👉 Performance optimization scenarios.

🎯 Round 4 – Techno Managerial

👉 Walkthrough of past projects & design decisions.
👉 Handling tight UI deadlines.
👉 Debugging complex frontend issues.
👉 What motivates me as a frontend engineer.

💡 Key Takeaways

✅ Interviews test what you know + how you explain.
✅ Strong fundamentals matter, but articulation is equally critical.
✅ Early rejections aren’t failures — they’re stepping stones that sharpen both technical and communication skills.

❓ Have you ever felt you knew the concept well but couldn’t show it effectively during an interview?

👉 Missed earlier posts? Check the comments.
👉 Stay tuned — more interview experiences coming soon!



https://www.linkedin.com/posts/sakshiku945_frontend-development-roadmap-activity-7380806530767597568-Kk1q?utm_source=social_share_send&utm_medium=android_app&rcm=ACoAADvl-ZMBMZIsoUtPeb3xDUpzOewwyQ-0CiU&utm_campaign=whatsapp
